from vkbottle.bot import Bot, Message, MessageEvent, rules
from vkbottle import PhotoMessageUploader, DocMessagesUploader, KeyboardButtonColor, Text, GroupEventType, GroupTypes, VKAPIError
import logging, re, sqlite3, requests, random, os, json, re, emy, datetime, mysql.connector as con, keyboard, dual, time, asyncio
from openai import OpenAI
from langchain.schema import HumanMessage, SystemMessage
from langchain.chat_models.gigachat import GigaChat
from config import *
from searchTime import timeSity

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–µ—Ä–≤–∏—Å–µ GigaChat
chat = GigaChat(credentials=key_gigachat, verify_ssl_certs=False)

client = OpenAI(api_key=openai_key)
bot = Bot(token=api_bot)

conn = con.connect(
    host="8dt.h.filess.io",
    database="meo_gocorrect",
    port="3306",
    username="meo_gocorrect",
    password="89292007a"
)
cursor = conn.cursor()


ranks = {0: '–ú—É—Ç', 1: '–£—á–∞—Å—Ç–Ω–∏–∫', 2: '–ê–¥–º–∏–Ω', 3: '–°–æ–∑–¥–∞—Ç–µ–ª—å'}
fractions = {0: '–ñ–∏—Ç–µ–ª—å', 1: '–í–æ–∏–Ω', 2: '–ú–∞–≥', 3: '–í–æ—Ä', 4: '–ü—Ä–∏–∑—ã–≤–∞—Ç–µ–ª—å', 5: '–ë–æ–∂–µ—Å—Ç–≤–æ' }

logging.getLogger('vkbottle').setLevel(logging.ERROR)
photo_uploader = PhotoMessageUploader(bot.api)
doc_uploader = DocMessagesUploader(bot.api)

async def get_chat_name(peer_id):
    try:
        conversation = await bot.api.messages.get_conversations_by_id(peer_ids=peer_id)
        chat_title = conversation.items[0].chat_settings.title
        return chat_title
    except VKAPIError as e:
        print(f"An error occurred: {e}")
        return None

async def generate(text):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        messages=[{"role": "system", "content": "–û—Ç—ã–≥—Ä–∞–π —Ä–æ–ª—å —à–ª—é—Ö–∏."},
                  {"role": "user", "content": f"–¢—ã –≥–æ–ø–Ω–∏–∫, —Ç—ã –ª—é–±–∏—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, —Ç–µ–±–µ –ø–ª–µ–≤–∞—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞"},
                  {"role": "assistant", "content": f"–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –≥–æ–ø–Ω–∏–∫–æ–º"},
                  {"role": "user", "content": f"{text}."}]
    )
    return response.choices[0].message.content

async def generate_repl(text, old_text):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        messages=[{"role": "system", "content": "–û—Ç—ã–≥—Ä–∞–π —Ä–æ–ª—å —à–ª—é—Ö–∏."},
                  {"role": "user", "content": f"–¢—ã –≥–æ–ø–Ω–∏–∫, —Ç—ã –ª—é–±–∏—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, —Ç–µ–±–µ –ø–ª–µ–≤–∞—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞"},
                  {"role": "assistant", "content": f"{old_text}"},
                  {"role": "user", "content": f"{text}."}]
    )
    return response.choices[0].message.content

async def generate_a(text, rew_text):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        messages=[{"role": "system", "content": "–û—Ç—ã–≥—Ä–∞–π —Ä–æ–ª—å —à–ª—é—Ö–∏."},
                  {"role": "user", "content": f"–¢—ã –≥–æ–ø–Ω–∏–∫, —Ç—ã –ª—é–±–∏—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, —Ç–µ–±–µ –ø–ª–µ–≤–∞—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞"},
                  {"role": "user", "content": f"–û–Ω —Å–∫–∞–∑–∞–ª: {rew_text}. {text}."}]
    )
    return response.choices[0].message.content

async def generate_yagpt(text):
    messages = [
        SystemMessage(
            content="–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –±–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—à–∏—Ç—å –µ–≥–æ –ø—Ä–æ–±–ª–µ–º—ã."
        )
    ]
    messages.append(HumanMessage(content=text))
    res = chat(messages)
    messages.append(res)
    # –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
    return res.content

async def kick_user(peer_id: int, user_id: int):
    try:
        await bot.api.messages.remove_chat_user(chat_id=peer_id - 2000000000, user_id=user_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def update_bd(user_id, peer_id, message):
    cursor.execute(f'CREATE TABLE IF NOT EXISTS group_{peer_id} (`id` INTEGER PRIMARY KEY, `message_count` INTEGER NOT NULL, `partner_id` INTEGER, `rank` INTEGER NOT NULL, `partner_time` TEXT)')
    cursor.execute('CREATE TABLE IF NOT EXISTS `groups` (`id` INTEGER PRIMARY KEY, `hello_msg` TEXT, `ii` INTEGER, hent INTEGER)')
    cursor.execute("SELECT * FROM users WHERE id = %s", (user_id,))
    result = cursor.fetchone()
    cursor.execute('SELECT * FROM roulete WHERE id = %s', (user_id,))
    result_roulete = cursor.fetchone()
    cursor.execute(f"SELECT * FROM group_{peer_id} WHERE id = %s", (user_id,))
    result_global = cursor.fetchone()
    cursor.execute("SELECT * FROM groups WHERE id = %s", (peer_id,))
    result_info = cursor.fetchone()

    conversation_info = await bot.api.messages.get_conversations_by_id(peer_ids=message.peer_id)
    creator_id = conversation_info.items[0].chat_settings.owner_id
    if creator_id == message.from_id:
        creator = 3
    else:
        creator = 1

    if result is None and user_id > 0:
        users_info = await bot.api.users.get(user_id)
        cursor.execute("INSERT INTO users VALUES (%s, %s, 1, NULL, 0, 1, 0, NULL, %s, 0, NULL, NULL, 0)", (user_id, f'{users_info[0].first_name} {users_info[0].last_name}', 0))
    elif result_info is None:
        cursor.execute("INSERT INTO groups VALUES (%s, NULL, 0, 0)", (peer_id,))
    elif result_global is None:
        cursor.execute(f"INSERT INTO group_{peer_id} VALUES (%s, 0, NULL, {creator}, NULL)", (user_id,))
    elif result_roulete is None and user_id > 0:
        cursor.execute('INSERT INTO roulete VALUES (%s, 0, 0, 0, 0, 0)', (user_id,))
    elif user_id > 0:
        money = result[4] + 1
        message_count = result[2] + 1

        message_count_global = result_global[1] + 1
        cursor.execute(f'UPDATE group_{peer_id} SET message_count = %s WHERE id = %s', (message_count_global, user_id))
        cursor.execute('UPDATE users SET message_count = %s WHERE id = %s', (message_count, user_id))
        cursor.execute('UPDATE users SET money = %s WHERE id = %s', (money, user_id))
    conn.commit()

async def top_msg(user_id, peer_id):
    cursor.execute('SELECT id, message_count FROM group_%s WHERE id > 0 ORDER BY message_count DESC LIMIT 25', (peer_id,))
    top_users = cursor.fetchall()
    if top_users:
        response = 'üìä –†–ï–ô–¢–ò–ù–ì –£–ß–ê–°–¢–ù–ò–ö–û–í –ü–û –°–û–û–ë–©–ï–ù–ò–Ø–ú –í –ë–ï–°–ï–î–ï:\n\n'
        for i, (user_id, message_count) in enumerate(top_users, start=1):
            cursor.execute('SELECT name FROM users WHERE id = %s', (user_id,))
            name = cursor.fetchone()
            if name:
                name = name[0]
            else:
                name = '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'
            response += f'{i}. @id{user_id}({name}) - {message_count:,}\n'
        response += f'\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {await all_msg(peer_id)}'
        result = response
    else:
        result = 'üö´ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üö´'
    return result

async def all_msg(peer_id):
    cursor.execute('SELECT SUM(message_count) FROM group_%s WHERE id > 0', (peer_id,))
    total_messages = cursor.fetchone()[0]
    if total_messages:
        response = f'{total_messages:,}'
    else:
        response = '0'
    return response

async def all_cats(peer_id):
    cursor.execute('''
        SELECT SUM(money)
        FROM users
        WHERE id IN (SELECT id FROM group_%s WHERE id > 0)
    ''', (peer_id,))

    total_money = cursor.fetchone()[0]
    if total_money:
        response = f'{total_money:,}'
    else:
        response = '0'
    return response

async def statistic_bd():
    cursor.execute("SELECT COUNT(*) FROM users")
    count_users = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM groups")
    count_groups = cursor.fetchone()[0]

    result = '‚öôÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n'
    result += f"‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}\n"
    result += f"‚îî –í—Å–µ–≥–æ –±–µ—Å–µ–¥: {count_groups}"
    return result

async def top_cats(peer_id):
    cursor.execute('''
        SELECT u.id, u.money
        FROM users u
        WHERE u.money > 0 AND u.id IN (SELECT id FROM group_%s)
        ORDER BY u.money DESC LIMIT 25
    ''', (peer_id,))
    top_cats = cursor.fetchall()
    if top_cats:
        response = 'üê± –¢–û–ü –ö–û–¢–Ø–¢\n\n'
        for i, (user_id, money) in enumerate(top_cats, start=1):
            cursor.execute('SELECT name FROM users WHERE id = %s', (user_id,))
            name = cursor.fetchone()[0]
            response += f'{i}. @id{user_id}({name}) - {money:,}\n'
        response += f'\n–í—Å–µ–≥–æ –∫–æ—Ç—è—Ç: {await all_cats(peer_id)}'
        result = response
    else:
        result = 'üö´ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ç—è—Ç üö´'
    return result

async def braki(user_id, peer_id):
    cursor.execute(f'SELECT id, partner_id FROM group_{peer_id} ORDER BY partner_id')
    top_users = cursor.fetchall()
    if top_users:
        response = 'üíç –°–ø–∏—Å–æ–∫ –±—Ä–∞–∫–æ–≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã:\n\n'
        processed_pairs = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, (id, partner_id) in enumerate(top_users):
            if partner_id is not None and (partner_id, id) not in processed_pairs:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                cursor.execute('SELECT * FROM users WHERE id = %s', (partner_id,))
                partner = cursor.fetchone()
                cursor.execute('SELECT * FROM users WHERE id = %s', (id,))
                result = cursor.fetchone()
                cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (user_id,))
                result_global = cursor.fetchone()
                name = result[1]
                partner_name = partner[1]
                response += f'* [id{id}|{name}] –∏ @id{partner_id}({partner_name}) –≤ –±—Ä–∞–∫–µ —Å {result_global[4]}\n'
                processed_pairs.add((id, partner_id))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        result = response
    else:
        result = 'üö´ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üö´'
    return result

async def info_group(peer_id, message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–µ–¥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM groups WHERE id = %s", (peer_id,))
    result_info = cursor.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(f"SELECT id, rank FROM group_{peer_id} WHERE rank IN (2, 3)")
    members_info = cursor.fetchall()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    admins = []
    creator = None

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for member_id, rank in members_info:
        if rank == 3:  # –ï—Å–ª–∏ —Ä–∞–Ω–≥ —Ä–∞–≤–µ–Ω 3, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
            cursor.execute('SELECT name FROM users WHERE id = %s', (member_id,))
            creator_name = cursor.fetchone()
            creator = f'@id{member_id}({creator_name[0]})'
        elif rank == 2:  # –ï—Å–ª–∏ —Ä–∞–Ω–≥ —Ä–∞–≤–µ–Ω 2, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            cursor.execute('SELECT name FROM users WHERE id = %s', (member_id,))
            admin_name = cursor.fetchone()
            admins.append(f'@id{member_id}({admin_name[0]})')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö
    response = " üëë –°–û–ó–î–ê–¢–ï–õ–¨ \n‚îÇ ‚îî {}\n‚îÇ\n‚îú".format(creator) if creator else " üëë –°–û–ó–î–ê–¢–ï–õ–¨ \n‚îÇ ‚îî –ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ\n‚îÇ\n‚îú"
    response += " üë§ –ê–î–ú–ò–ù–´ \n"
    if admins:
        for admin in admins[:-1]:
            response += f"‚îÇ ‚îú {admin}\n"
        response += f"‚îÇ ‚îî {admins[-1]}\n"
    else:
        response += "‚îú ‚îî –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã
    conversation_members = await bot.api.messages.get_conversation_members(peer_id=peer_id)
    online_count = sum(1 for member in conversation_members.profiles if member.online)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–µ—Å–µ–¥–µ
    cursor.execute('SELECT id, message_count FROM group_%s WHERE id > 0 ORDER BY message_count DESC LIMIT 1', (peer_id,))
    top_user = cursor.fetchone()
    top_msg = None  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    if top_user:
        user_id, message_count = top_user
        cursor.execute('SELECT name FROM users WHERE id = %s', (user_id,))
        name = cursor.fetchone()[0]
        top_msg = f'@id{user_id}({name})'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–µ–¥–µ
    ii = result_info[2]
    ii_status = '–ê–∫—Ç–∏–≤–µ–Ω' if ii >= 1 else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'

    hent = result_info[3]
    hentai_status = '–ê–∫—Ç–∏–≤–µ–Ω' if ii >= 1 else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'

    info = f'üëë {await get_chat_name(peer_id)}\n'
    info += f'‚îú ‚≠ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n'
    info += f'‚îÇ ‚îú –ò–ò –º–æ–¥—É–ª—å: {ii_status}\n'
    info += f'‚îÇ ‚îú –•–µ–Ω—Ç–∞–π –º–æ–¥—É–ª—å: {hentai_status}\n'
    info += f'‚îÇ ‚îú –ê–∫—Ç–∏–≤–Ω—ã–π: {top_msg}\n'
    info += f'‚îÇ ‚îú –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {await all_msg(peer_id)}\n'
    info += f'‚îÇ ‚îú –í—Å–µ–≥–æ –∫–æ—Ç—è—Ç: {await all_cats(peer_id)}\n'
    info += f'‚îÇ ‚îî –û–Ω–ª–∞–π–Ω: {online_count}\n‚îÇ\n‚îú'
    info += response
    info += '‚îî'

    return info


async def profile(user_id, peer_id):
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()

    cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (user_id,))
    result_global = cursor.fetchone()
    money = result[4]
    rank = result_global[3]
    user_name = result[1]
    bank = result[6]
    message_count = result[2]
    message_count_global = result_global[1]
    fraction = result[8]

    ami = '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if rank >= 2 else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    profile = f"üë§ @id{user_id} ({user_name})\n"
    profile += f"‚îú –†–æ–ª—å: {ranks[rank]}\n"
    profile += f"‚îú –ö–ª–∞—Å—Å: {fractions[fraction]}\n"
    profile += f"‚îú VIP-–°—Ç–∞—Ç—É—Å: {ami}\n"
    profile += f"‚îú –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
    profile += f"‚îú –õ–∏—á–Ω—ã–π –ê–∫—Ç–∏–≤: {message_count_global}\n"
    profile += f"‚îú –ö–æ–ª-–≤–æ –∫–æ—Ç—è—Ç: {money:,.0f}\n"
    profile += f"‚îî –ö–æ—Ç—è—Ç –≤ –ø—Ä–∏—é—Ç–µ: {bank:,.0f}\n" if result_global[2] is None else ''
    if result_global[2] is not None:
        cursor.execute('SELECT * FROM users WHERE id = %s', (result_global[2],))
        partner = cursor.fetchone()
        profile += f"‚îú –ö–æ—Ç—è—Ç –≤ –ø—Ä–∏—é—Ç–µ: {bank:,.0f}\n"
        profile += f'‚îî –ü–∞—Ä—Ç–Ω—ë—Ä: @id{partner[0]} ({partner[1]})\n'

    return profile

async def revard_lvl(user_id):
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()

    influence = result[12]

    lvl = await emy.influence_lvl(influence)

    if lvl == 1:
        return random.randint(50,200)
    elif lvl == 2:
        return random.randint(100,400)
    elif lvl == 3:
        return random.randint(150,800)
    elif lvl == 4:
        return random.randint(200,1600)
    elif lvl == 5:
        return random.randint(250,3200)
    elif lvl == 6:
        return random.randint(300,6400)
    elif lvl == 7:
        return random.randint(350,12800)
    elif lvl == 8:
        return random.randint(400,23600)
    elif lvl == 9:
        return random.randint(450,47200)
    elif lvl == 10:
        return random.randint(500,94400)

async def influence_stat(user_id):
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()

    influence = result[12]
    next_level_points = emy.next_level_points
    level = await emy.influence_lvl(influence)

    if level < len(next_level_points):
        remaining_points = next_level_points[level - 1] - influence
        inf = f'{influence:,.0f}/{next_level_points[level - 1]:,.0f}'
    else:
        remaining_points = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        inf = f'{influence:,.0f}'

    info = f"üë§ @id{user_id}(–û–ü–´–¢)\n"
    info += f"‚îú –û–ø—ã—Ç: {inf}\n"
    info += f"‚îî –£—Ä–æ–≤–µ–Ω—å: {level}\n"

    return info

async def statistic_luck(user_id):
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()

    luck = result[9]

    info = f'üí™ @id{user_id}(–°–ò–õ–ê)\n'
    info += f'‚îú –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã: 100 –µ–¥.\n'
    info += f'‚îú –£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã: {luck} lvl\n'
    info += f'‚îî –û–±—â–∞—è —Å–∏–ª–∞: {100 + luck * 5} –µ–¥.'

    return info

async def brak_chek(user_id, peer_id):
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()
    cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (user_id,))
    result_global = cursor.fetchone()
    user_name = result[1]
    partner = result_global[2]
    if partner is not None:
        cursor.execute('SELECT * FROM users WHERE id = %s', (partner,))
        partner = cursor.fetchone()
        partner_time = result_global[4]
        partner_time = datetime.datetime.strptime(partner_time, '%d.%m.%Y') # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
        days_since_registration = (datetime.datetime.now() - partner_time).days # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –¥–Ω—è—Ö

        if days_since_registration == 1:
            days_word = '–¥–µ–Ω—å'
        elif 2 <= days_since_registration <= 4:
            days_word = '–¥–Ω—è'
        else:
            days_word = '–¥–Ω–µ–π'

        brak = f'üíå @id{user_id}({user_name})\n'
        brak += f'‚îú –ë—Ä–∞–∫: @id{partner[0]} ({partner[1]})\n'
        brak += f'‚îî –í –±—Ä–∞–∫–µ {days_since_registration} {days_word}' if days_since_registration > 0 else f'‚îî –í –±—Ä–∞–∫–µ –º–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è\n\n'
    else:
        brak = f'@id{user_id}({result[1]}), —É —Ç–µ–±—è –Ω–µ—Ç –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏!\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: –±—Ä–∞–∫ —Å–æ–∑–¥–∞—Ç—å - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ —Å –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è.'
    return brak

async def history_dyals(user_id):
    cursor.execute('SELECT history_dyal FROM roulete WHERE id = %s', (user_id,))
    result_stat = cursor.fetchone()[0]
    return result_stat

async def statistic_dyal(user_id):
    cursor.execute('SELECT * FROM roulete WHERE id = %s', (user_id,))
    result_stat = cursor.fetchone()
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()
    wins = result_stat[1]
    fails = result_stat[2]
    won = result_stat[3]
    lost = result_stat[4]
    total_games = wins + fails
    win_percentage = (wins / total_games) * 100 if total_games > 0 else 0
    stat = f'üìä @id{user_id}(–î—É—ç–ª—å)\n'
    stat += f'‚îú –ü–æ–±–µ–¥: {wins}\n'
    stat += f'‚îú –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {fails}\n'
    stat += f'‚îú –í—Å–µ–≥–æ –¥—É—ç–ª–µ–π: {wins+fails}\n'
    stat += f'‚îú –í–∏–Ω—Ä–µ–π—Ç: {win_percentage:.2f}%\n'
    stat += f'‚îú –ö–æ—Ç—è—Ç –≤—ã–∏–≥—Ä–∞–Ω–æ: {won:,.0f}\n'
    stat += f'‚îî –ö–æ—Ç—è—Ç –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ: {lost:,.0f}'
    return stat

async def photo_profile(user_id):
    info = await bot.api.users.get(user_id, 'photo_200')
    photo_url = info[0].photo_200
    img_data = requests.get(photo_url).content
    with open('image.jpg', 'wb') as handler:
        handler.write(img_data)
    photo = await photo_uploader.upload(
        file_source='image.jpg',
    )
    return photo

async def active(user_id, peer_id, message, text):
    for keyword, attachments in emy.attachment_links.items():
        if keyword in text:
            cursor.execute(f"SELECT * FROM group_{peer_id} WHERE id = %s", (user_id,))
            result_group = cursor.fetchone()
            if message.reply_message:
                user_id_repli = message.reply_message.from_id
            elif not message.reply_message and result_group[2] is not None:
                user_id_repli = result_group[2]
            else:
                return
            cursor.execute('SELECT * FROM users WHERE id = %s', (user_id_repli,))
            receiver = cursor.fetchone()
            cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
            info = cursor.fetchone()
            cursor.execute("SELECT * FROM groups WHERE id = %s", (peer_id,))
            result_info = cursor.fetchone()
            action, *additional_words = text.split(' ', 1)
            if additional_words:
                res = f"\n –°–æ —Å–ª–æ–≤–∞–º–∏: {additional_words[0]}"
            else:
                res = ''
            msg = ''
            if attachments:
                attachment = random.choice(attachments)
                if action == '–æ–±–Ω—è—Ç—å':
                    msg = f'ü§ó @id{user_id}({info[1]}) –æ–±–Ω—è–ª @id{user_id_repli}({receiver[1]})‚ù§Ô∏è {res}'
                elif action == '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å':
                    msg = f'üíã @id{user_id}({info[1]}) –Ω–µ–∂–Ω–æ –ø–æ—Ü–µ–ª–æ–≤–∞–ª @id{user_id_repli}({receiver[1]})üíï {res}'
                elif action == '—á–º–æ–∫':
                    msg = f'üíè @id{user_id}({info[1]}) —á–º–æ–∫–Ω—É–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '—É–¥–∞—Ä–∏—Ç—å':
                    msg = f'üëäüòµ @id{user_id}({info[1]}) —É–¥–∞—Ä–∏–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '–Ω–∞–±—É—Ö–∞—Ç—å—Å—è':
                    msg = f'üòµüçªüòµ @id{user_id}({info[1]}) –Ω–∞–±—É—Ö–∞–ª—Å—è —Å @id{user_id_repli}({receiver[1]}), –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–¥–∏–Ω –∏–∑  –Ω–∏—Ö –ø—Ä–∏–∑–Ω–∞–ª—Å—è –≤–ª—é–±–≤–∏ @jd7ex4a4s1(—Ç–µ–ª–∫–µ)'
                elif action == '—É–∫—É—Å–∏—Ç—å':
                    msg = f'üòà @id{user_id}({info[1]}) –∏–≥—Ä–∏–≤–æ —É–∫—É—Å–∏–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '–ø–æ–≥–ª–∞–¥–∏—Ç—å':
                    msg = f'üëêüòä @id{user_id}({info[1]}) –Ω–µ–∂–Ω–æ –ø–æ–≥–ª–∞–¥–∏–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '–æ—Ç—à–ª–µ–ø–∞—Ç—å':
                   msg = f'üñêÔ∏èüò≥ @id{user_id}({info[1]}) –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Ç—à–ª–µ–ø–∞–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '–æ—Ç—à–ª—ë–ø–∞—Ç—å':
                   msg = f'üñêÔ∏èüò≥ @id{user_id}({info[1]}) –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Ç—à–ª—ë–ø–∞–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '–ø–æ–∫–æ—Ä–º–∏—Ç—å':
                   msg = f'üç≤üòã @id{user_id}({info[1]}) –ø–æ–∫–æ—Ä–º–∏–ª @id{user_id_repli}({receiver[1]}) –≤–∫—É—Å–Ω—ã–º —É–∂–∏–Ω–æ–º, —É–∫—Ä–µ–ø–ª—è—è —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–∏–º–∏ üçΩÔ∏è'
                elif action == '–∑–∞–∫–æ–ø–∞—Ç—å':
                   msg = f'‚ö∞Ô∏èüò± @id{user_id}({info[1]}) –∑–∞–∫–æ–ø–∞–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '—Å–≤—è–∑–∞—Ç—å':
                   msg = f'üîóüò≥ @id{user_id}({info[1]}) —Å–≤—è–∑–∞–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '–ø–æ–ª–∞–ø–∞—Ç—å':
                   msg = f'üëêüòè @id{user_id}({info[1]}) –ª–µ–≥–æ–Ω—å–∫–æ –ø–æ–ª–∞–ø–∞–ª @id{user_id_repli}({receiver[1]}), –∑–∞—Å—Ç–∞–≤–∏–≤ –∏—Ö –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ üòä'
                elif action == '–∏—Å–ø—É–≥–∞—Ç—å':
                   msg = f'üëªüò± @id{user_id}({info[1]}) –∏—Å–ø—É–≥–∞–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif action == '–±—É':
                   msg = f'üëªüò± @id{user_id}({info[1]}) –∏—Å–ø—É–≥–∞–ª @id{user_id_repli}({receiver[1]}), –∑–∞—Å—Ç–∞–≤–∏–≤ –µ–≥–æ —Å–µ—Ä–¥—Ü–µ –∑–∞–±–∏—Ç—å—Å—è —á—É—Ç—å –ª–∏ –¥–æ –∏–Ω—Ñ–∞—Ä–∫—Ç–∞ üôÄ'
                elif action == '–ø–µ—Ä–µ—Å–ø–∞—Ç—å':
                   msg = f'üõèÔ∏èüòè @id{user_id}({info[1]}) –∏ @id{user_id_repli}({receiver[1]}) –ø—Ä–æ–≤–µ—Ä–∏ –Ω–æ—á—å –≤–º–µ—Å—Ç–µ –Ω–µ –æ—Ç–ø—É—Å–∫–∞—è –¥—Ä—É–≥-–¥—Ä—É–≥–∞ {res}'
                elif action == '—É–∫—Ä–∞—Å—Ç—å':
                   msg = f'üõèÔ∏èüòè @id{user_id}({info[1]}) —É—Å—ã–ø–∏–ª –∏ —É–∫—Ä–∞–ª @id{user_id_repli}({receiver[1]}) ...\n @id{user_id_repli}({receiver[1]}) , —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¢–µ—Å—Ç –Ω–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å... –£ –ü–æ—Ö–∏—Ç–µ–ª—è –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ —Å–µ–∫—Å–∞...'
                elif action == '–ø–Ω—É—Ç—å':
                   msg = f'ü¶∂üòµ@id{user_id}({info[1]}) –ø–Ω—É–ª @id{user_id_repli}({receiver[1]}) {res}'
                elif text == '—É–µ–±–∞—Ç—å –æ–± —Å—Ç–µ–Ω—É':
                   msg = f'üñêÔ∏èüòµ@id{user_id}({info[1]}) —É–µ–±–∞–ª @id{user_id_repli}({receiver[1]}) –æ–± —Å—Ç–µ–Ω—É'
                elif action == '—Å–∂–µ—á—å':
                   msg = f'üî•üò± @id{user_id}({info[1]}) —Å–∂–µ–≥ @id{user_id_repli}({receiver[1]}) {res}'
                elif text == '–ø—Ä–æ–¥–∞—Ç—å –≤ —Ä–∞–±—Å—Ç–≤–æ':
                   msg = f'üí∞üì¢ @id{user_id}({info[1]}) –≤—ã–Ω–µ—Å –ø—Ä–∏–≥–æ–≤–æ—Ä —Å–≤–æ–µ–º—É —Ä–∞–±—É @id{user_id_repli}({receiver[1]}), –≤—ã—Å—Ç–∞–≤–∏–≤ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω'
                elif text == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–ª–µ':
                   msg = f'‚ò†üë∫ @id{user_id}({info[1]}) –∏–∑–±–∏–ª –ø–ª–µ—Ç–∫–æ–π @id{user_id_repli}({receiver[1]}), –∑–∞—Å—Ç–∞–≤–∏–≤  –≥–æ—Ä–±–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–ª—è—Ö'
                elif action == '–∫–∞–∑–Ω–∏—Ç—å':
                   msg = f'‚ò†ü™ì @id{user_id}({info[1]}) –æ—Ç—Ä—É–±–∏–ª –≥–æ–ª–æ–≤—É @id{user_id_repli}({receiver[1]}) {res}'
                elif text == '–∫–∏–Ω—É—Ç—å –Ω–∞ –∫—Ä–æ–≤–∞—Ç—å':
                   msg = f'üõèÔ∏èüòè @id{user_id}({info[1]}) –∫–∏–Ω—É–ª @id{user_id_repli}({receiver[1]}) –Ω–∞ –∫—Ä–æ–≤–∞—Ç—å'

                if result_info[3] == 1:
                    if text == '—Å–µ—Å—Ç—å –Ω–∞ –ª–∏—Ü–æ':
                        msg = f'üçëüòõ @id{user_id}({info[1]}) —Å–µ–ª–∞ –Ω–∞ @id{user_id_repli}({receiver[1]})'
                    elif action == '–æ—Ç—Å–æ—Å–∞—Ç—å':
                        msg = f'üçåüëÑ @id{user_id}({info[1]}) –æ—Ç—Å–æ—Å–∞–ª–∞ —É @id{user_id_repli}({receiver[1]}) {res}'
                    elif action == '–æ—Ç–ª–∏–∑–∞—Ç—å':
                        msg = f'üòõüçë @id{user_id}({info[1]}) –æ—Ç–ª–∏–∑–∞–ª —É @id{user_id_repli}({receiver[1]}) {res}'
                    elif action == '—Ç—Ä–∞—Ö–Ω—É—Ç—å':
                        msg = f'üçåüçëü•µ @id{user_id}({info[1]}) –≤–º–µ—Å—Ç–µ –∑–∞–Ω—è–ª–∏—Å—å —Å–µ–∫—Å–æ–º @id{user_id_repli}({receiver[1]}) {res}'
                    elif action == '–≤—ã–µ–±–∞—Ç—å':
                        msg = f'üçåüçëü•µ @id{user_id}({info[1]}) –≤—ã–µ–±–∞–ª @id{user_id_repli}({receiver[1]}) {res}'
                else:
                    pass
                if msg:
                    await message.answer(msg, attachment=attachment)
            else:
                await message.answer(f'No photos found for the {keyword} action.')
            break  # Exit the loop after finding a matching keyword

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "reward_yes"}),
)
async def hi_handler(event: MessageEvent):
    a = await bot.api.messages.get_by_conversation_message_id(event.peer_id, conversation_message_ids = event.conversation_message_id)
    text = a.items[0].text
    id_pattern = r'id(\d+)'
    match = re.findall(id_pattern, text)
    user_id = match[0]

    if event.user_id == int(user_id):
        cursor.execute('SELECT * FROM users WHERE id = %s', (event.user_id,))
        result = cursor.fetchone()

        delta = datetime.timedelta(hours=9, minutes=0)
        t = (datetime.datetime.now(datetime.timezone.utc) + delta)
        nowdate = t.strftime("%d.%m.%Y")
        timeDay = f"{nowdate}"

        if result[10] != timeDay:
            reward_s = await revard_lvl(user_id)
            cursor.execute('UPDATE users SET rewardet = %s, money = %s WHERE id = %s', (timeDay, result[4] + reward_s, user_id))
            conn.commit()
            await event.show_snackbar(f'–ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n–ó–∞—á–∏—Å–ª–µ–Ω–æ {reward_s} –∫–æ—Ç—è—Ç!')
        else:
            await event.show_snackbar('–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!')

    else:
        await event.show_snackbar(await emy.random_msg())

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "reward_no"}),
)
async def hi_handler(event: MessageEvent):
    a = await bot.api.messages.get_by_conversation_message_id(event.peer_id, conversation_message_ids = event.conversation_message_id)
    text = a.items[0].text
    id_pattern = r'id(\d+)'
    match = re.findall(id_pattern, text)
    user_id = match[0]

    if event.user_id == int(user_id):
        await event.show_snackbar('–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!')
    else:
        await event.show_snackbar(await emy.random_msg())

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "not_sure_dyal"}),
)
async def hi_handler(event: MessageEvent):
    a = await bot.api.messages.get_by_conversation_message_id(event.peer_id, conversation_message_ids = event.conversation_message_id)
    text = a.items[0].text
    id_pattern = r'id(\d+)'
    match = re.findall(id_pattern, text)
    user_id, partner_id = match
    cursor.execute('SELECT * FROM users WHERE id = %s', (partner_id,))
    partner = cursor.fetchone()
    partner_name = partner[1]
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()
    user_name = result[1]

    if event.user_id == int(user_id):
        await bot.api.messages.delete(peer_id=event.peer_id, cmids=event.conversation_message_id, delete_for_all=True, group_id=event.group_id)
        await bot.api.messages.send(
            peer_id=event.peer_id, message=f'@id{user_id}({user_name}) —Ä–µ—à–∏–ª –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –¥—É—ç–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–µ–æ—Ç–ª–æ–∂–Ω—ã–µ –¥–µ–ª–∞!', random_id=0, attachment=random.choice(emy.random_dyal_cancellation)
        )
    elif event.user_id == int(partner_id):
        await bot.api.messages.delete(peer_id=event.peer_id, cmids=event.conversation_message_id, delete_for_all=True, group_id=event.group_id)
        await bot.api.messages.send(
            peer_id=event.peer_id, message=f'@id{partner_id}({partner_name}) —Ä–µ—à–∏–ª –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –¥—É—ç–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–µ–æ—Ç–ª–æ–∂–Ω—ã–µ –¥–µ–ª–∞!', random_id=0, attachment=random.choice(emy.random_dyal_cancellation)
        )
    else:
        await event.show_snackbar(await emy.random_msg())

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "next_atty"}),
)
async def hi_handler(event: MessageEvent):
    await bot.api.messages.edit(peer_id=event.peer_id, conversation_message_id=event.conversation_message_id, keyboard=keyboard.keyboard_atty, attachment=random.choice(emy.random_png_etty))

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "next_legs"}),
)
async def hi_handler(event: MessageEvent):
    await bot.api.messages.edit(peer_id=event.peer_id, conversation_message_id=event.conversation_message_id, keyboard=keyboard.keyboard_legs, attachment=random.choice(emy.random_png_legs))

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "next_ass"}),
)
async def hi_handler(event: MessageEvent):
    await bot.api.messages.edit(peer_id=event.peer_id, conversation_message_id=event.conversation_message_id, keyboard=keyboard.keyboard_ass, attachment=random.choice(emy.random_png_ass))

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "next_tank"}),
)
async def hi_handler(event: MessageEvent):
    await bot.api.messages.edit(peer_id=event.peer_id, conversation_message_id=event.conversation_message_id, keyboard=keyboard.keyboard_tank, attachment=random.choice(emy.random_png_tank))

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "next_pet"}),
)
async def hi_handler(event: MessageEvent):
    await bot.api.messages.edit(peer_id=event.peer_id, conversation_message_id=event.conversation_message_id, keyboard=keyboard.keyboard_pet, attachment=random.choice(emy.random_png_pet))

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "next_gry"}),
)
async def hi_handler(event: MessageEvent):
    await bot.api.messages.edit(peer_id=event.peer_id, conversation_message_id=event.conversation_message_id, keyboard=keyboard.keyboard_gry, attachment=random.choice(emy.random_png_gry))

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "next_tentacles"}),
)
async def hi_handler(event: MessageEvent):
    await bot.api.messages.edit(peer_id=event.peer_id, conversation_message_id=event.conversation_message_id, keyboard=keyboard.keyboard_tentacles, attachment=random.choice(emy.random_png_tentacles))

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "sure_dyal"}),
)
async def hi_handler(event: MessageEvent):
    a = await bot.api.messages.get_by_conversation_message_id(event.peer_id, conversation_message_ids = event.conversation_message_id)
    text = a.items[0].text
    id_pattern = r'id(\d+)'
    bet_pattern = r'–°—Ç–∞–≤–∫–∞ –¥—É—ç–ª–∏: (\d+)'
    bet_match = re.search(bet_pattern, text)
    match = re.findall(id_pattern, text)
    user_id, partner_id = match

    cursor.execute('SELECT * FROM users WHERE id = %s', (partner_id,))
    partner = cursor.fetchone()
    partner_name = partner[1]
    partner_money = partner[4]
    luck_partner = partner[9]

    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()
    user_name = result[1]
    money = result[4]
    luck = result[9]

    cursor.execute('SELECT * FROM roulete WHERE id = %s', (user_id,))
    result_stat = cursor.fetchone()
    wins = result_stat[1]
    fails = result_stat[2]
    won = result_stat[3]
    lost = result_stat[4]
    history_dyal = result_stat[5]

    cursor.execute('SELECT * FROM roulete WHERE id = %s', (partner_id,))
    result_stat_partner = cursor.fetchone()
    wins_partner = result_stat_partner[1]
    fails_partner = result_stat_partner[2]
    partner_won = result_stat_partner[3]
    partner_lost = result_stat_partner[4]
    history_dyal_partner = result_stat_partner[5]

    if event.user_id == int(user_id):
        await event.show_snackbar(await emy.random_msg())
    elif event.user_id == int(partner_id):
        bet = bet_match.group(1) if bet_match else "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        if money < int(bet):
            await bot.api.messages.send(
                peer_id=event.peer_id,
                message=f"‚ùóÔ∏è| –£ @id{user_id}({user_name}) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏. –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {int(bet) - money:,.0f} –∫–æ—Ç—è—Ç!",
                random_id=0
            )
        elif partner_money < int(bet):
            await bot.api.messages.send(
                peer_id=event.peer_id,
                message=f"‚ùóÔ∏è| –£ @id{partner_id}({partner_name}) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏. –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {int(bet) - partner_money:,.0f} –∫–æ—Ç—è—Ç!",
                random_id=0
            )
        else:
            player1_luck = 100 + luck * 5
            player2_luck = 100 + luck_partner * 5
            winner = await dual.duel(player1_luck, player2_luck)
            if winner == 1:
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (money + int(bet), user_id))
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (partner_money - int(bet), partner_id))
                cursor.execute('UPDATE roulete SET fails = %s WHERE id = %s', (fails_partner + 1, partner_id))
                cursor.execute('UPDATE roulete SET wins = %s WHERE id = %s', (wins + 1, user_id))
                cursor.execute('UPDATE roulete SET won = %s WHERE id = %s', (won + int(bet), user_id))
                cursor.execute('UPDATE roulete SET lost = %s WHERE id = %s', (partner_lost + int(bet), partner_id))
                await bot.api.messages.delete(peer_id=event.peer_id, cmids=event.conversation_message_id, delete_for_all=True, group_id=event.group_id)
                await bot.api.messages.send(
                    peer_id=event.peer_id, message=f'–î—É—ç–ª—å –æ–∫–æ–Ω—á–µ–Ω–∞!\n‚îú –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @id{user_id}({user_name})\n‚îú –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: @id{partner_id}({partner_name}).\n‚îî –í—ã–∏–≥—Ä—ã—à: {int(bet) * 2:,.0f}', random_id=0, attachment=random.choice(emy.random_dyal_win)
                )
            elif winner == 2:
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (money - int(bet), user_id))
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (partner_money + int(bet), partner_id))
                cursor.execute('UPDATE roulete SET fails = %s WHERE id = %s', (fails + 1, user_id))
                cursor.execute('UPDATE roulete SET wins = %s WHERE id = %s', (wins_partner + 1, partner_id))
                cursor.execute('UPDATE roulete SET lost = %s WHERE id = %s', (lost + int(bet), user_id))
                cursor.execute('UPDATE roulete SET won = %s WHERE id = %s', (partner_won + int(bet), partner_id))
                await bot.api.messages.delete(peer_id=event.peer_id, cmids=event.conversation_message_id, delete_for_all=True, group_id=event.group_id)
                await bot.api.messages.send(
                    peer_id=event.peer_id, message=f'–î—É—ç–ª—å –æ–∫–æ–Ω—á–µ–Ω–∞!\n‚îú –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @id{partner_id}({partner_name})\n‚îú –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: @id{user_id}({user_name}).\n‚îî –í—ã–∏–≥—Ä—ã—à: {int(bet) * 2:,.0f}', random_id=0, attachment=random.choice(emy.random_dyal_win)
                )
            elif winner == 3:
                await bot.api.messages.delete(peer_id=event.peer_id, cmids=event.conversation_message_id, delete_for_all=True, group_id=event.group_id)
                await bot.api.messages.send(
                    peer_id=event.peer_id, message=f'–î—É—ç–ª—å –æ–∫–æ–Ω—á–µ–Ω–∞ –Ω–∏—á—å–µ–π!\n–ë–∞–Ω–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {int(bet) * 2:,.0f} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ @id{partner_id}({partner_name}) –∏ @id{user_id}({user_name})!', random_id=0, attachment=random.choice(emy.random_dyal_draw)
                )
            conn.commit()

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "sure"}),
)
async def hi_handler(event: MessageEvent):
    a = await bot.api.messages.get_by_conversation_message_id(event.peer_id, conversation_message_ids = event.conversation_message_id)
    text = a.items[0].text
    id_pattern = r'id(\d+)'
    # –ò–∑–≤–ª–µ–∫–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    match = re.findall(id_pattern, text)
    partner_id, user_id = match
    cursor.execute('SELECT * FROM users WHERE id = %s', (partner_id,))
    partner = cursor.fetchone()
    partner_name = partner[1]
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()
    user_name = result[1]

    if event.user_id == int(user_id):
        await event.show_snackbar(await emy.random_msg())
    elif event.user_id == int(partner_id):
        delta = datetime.timedelta(hours=9, minutes=0)
        t = (datetime.datetime.now(datetime.timezone.utc) + delta)
        nowdate = t.strftime("%d.%m.%Y")
        timeDay = f"{nowdate}"
        cursor.execute(f'UPDATE group_{event.peer_id} SET partner_id = %s WHERE id = %s', (partner_id, user_id))
        cursor.execute(f'UPDATE group_{event.peer_id} SET partner_id = %s WHERE id = %s', (user_id, partner_id))
        cursor.execute(f'UPDATE group_{event.peer_id} SET partner_time = %s WHERE id = %s', (timeDay, user_id))
        cursor.execute(f'UPDATE group_{event.peer_id} SET partner_time = %s WHERE id = %s', (timeDay, partner_id))
        conn.commit()
        await bot.api.messages.delete(peer_id=event.peer_id, cmids=event.conversation_message_id, delete_for_all=True, group_id=event.group_id)
        await bot.api.messages.send(
                peer_id=event.peer_id, message=f'üíí –° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏! –ë—Ä–∞–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–µ–∂–¥—É @id{user_id} ({user_name}) –∏ @id{partner_id} ({partner_name}). –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–±—Ä–∞—á–Ω—ã—Ö! üéäüíç', random_id=0, attachment=random.choice(emy.random_marriage_accept)
            )

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "not_sure"}),
)
async def hi_handler(event: MessageEvent):
    a = await bot.api.messages.get_by_conversation_message_id(event.peer_id, conversation_message_ids = event.conversation_message_id)
    text = a.items[0].text
    id_pattern = r'id(\d+)'
    # –ò–∑–≤–ª–µ–∫–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    match = re.findall(id_pattern, text)
    partner_id, user_id = match
    cursor.execute('SELECT * FROM users WHERE id = %s', (partner_id,))
    partner = cursor.fetchone()
    partner_name = partner[1]
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    result = cursor.fetchone()
    user_name = result[1]
    if event.user_id == int(user_id):
        await event.show_snackbar(await emy.random_msg())
    elif event.user_id == int(partner_id):
        await bot.api.messages.delete(peer_id=event.peer_id, cmids=event.conversation_message_id, delete_for_all=True, group_id=event.group_id)
        await bot.api.messages.send(
                peer_id=event.peer_id, message=f'üíî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é...\n@id{partner_id} ({partner_name}), –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª–∏ —Ç–µ–ø–ª—ã–µ —á—É–≤—Å—Ç–≤–∞, —Ä–µ—à–∏–ª –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! üòîüíî', random_id=0, attachment=random.choice(emy.random_marriage_rejection)
            )

#
# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –±–æ—Ç–∞
#
@bot.on.chat_message()
async def hi_handler(message: Message):
    user_id = message.from_id
    peer_id = message.peer_id
    text = message.text.lower()
    words = text.split()

    await active(user_id, message.peer_id, message, text)

    text_aup = message.text

    if text == '–ø—Ä–æ—Ñ–∏–ª—å':
        if message.reply_message:
            user_id = message.reply_message.from_id
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        frac = result[8]
        rewardet = result[10]

        delta = datetime.timedelta(hours=9, minutes=0)
        t = (datetime.datetime.now(datetime.timezone.utc) + delta)
        nowdate = t.strftime("%d.%m.%Y")
        timeDay = f"{nowdate}"

        if rewardet != timeDay:
            keyboards = keyboard.keyboard_reward_yes
        else:
            keyboards = keyboard.keyboard_reward_no

        attachment = await emy.class_random(frac)
        await message.answer(await profile(user_id, peer_id), attachment=attachment, keyboard=keyboards)

    elif text == '–æ–ø—ã—Ç':
        if not message.reply_message:
            await message.answer(await influence_stat(user_id))
        else:
            user_id_repli = message.reply_message.from_id
            await message.answer(await influence_stat(user_id_repli))

    elif text.startswith('–∫—É–ø–∏—Ç—å –æ–ø—ã—Ç '):
        cursor.execute('SELECT money, influence FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        money = result[0]
        influence = result[1]
        cats = int(text[12:])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç—è—Ç
        if cats < 5:
            await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç—è—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 5!')
        else:
            ex = cats / 5  # –û–ø—ã—Ç –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ—Ç—è—Ç, –ø–æ–¥–µ–ª–µ–Ω–Ω–æ–º—É –Ω–∞ 5
            if cats > money:
                await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç—è—Ç!")
            else:
                cursor.execute('UPDATE users SET influence = %s, money = %s WHERE id = %s', (influence + ex, money - cats, user_id))
                conn.commit()
                await message.answer(f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {ex:,.0f} –æ–ø—ã—Ç–∞ –∑–∞ {cats:,.0f} –∫–æ—Ç—è—Ç')


    elif text == '–ø–∏—Å—è':
        await message.answer(random.choice(emy.random_mes))

    elif text == '–∞–Ω–µ–∫–¥–æ—Ç':
        await message.answer(random.choice(emy.random_anec))

    elif text == '–∫—Ç–æ —è':
        await message.answer(random.choice(emy.random_us))

    elif text == '–∫—Ç–æ —è?':
        await message.answer(random.choice(emy.random_us))

    elif text == '–ø–æ–º–æ—â—å':
        await message.answer(random.choice(emy.random_comm))

    elif text == '–∫–æ–º–∞–Ω–¥—ã':
        await message.answer(random.choice(emy.random_comm))

    elif text == '–Ω–∞—á–∞—Ç—å':
        await message.answer(random.choice(emy.random_comm))

    elif text == '/infobd':
        await message.answer(await statistic_bd())

    elif text == '/reward':
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()

        delta = datetime.timedelta(hours=9, minutes=0)
        t = (datetime.datetime.now(datetime.timezone.utc) + delta)
        nowdate = t.strftime("%d.%m.%Y")
        timeDay = f"{nowdate}"

        if result[10] != timeDay:
            reward_s = await revard_lvl(user_id)
            cursor.execute('UPDATE users SET rewardet = %s, money = %s WHERE id = %s', (timeDay, result[4] + reward_s, user_id))
            await message.answer(f'–ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n–ó–∞—á–∏—Å–ª–µ–Ω–æ {reward_s} –∫–æ—Ç—è—Ç!')
        else:
            await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!')

    elif text == '–±–µ—Å–µ–¥–∞':
        await message.answer(await info_group(peer_id, message))

    elif text == '—Å–∏–ª–∞':
        await message.answer(await statistic_luck(user_id), attachment=random.choice(emy.random_png_power))

    elif text == '–∫–æ—Ç—è—Ç–∞' and not message.reply_message:
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        money = result[4]
        user_name = result[1]
        await message.answer(f'@id{user_id}({user_name}), —É —Ç–µ–±—è {money:,.0f} –∫–æ—Ç—è—Ç!')

    elif len(words) > 0 and words[0] == '!—Ä–æ–ª—å' and message.reply_message:
        cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        rank = result[3]
        user_id_repli = message.reply_message.from_id
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id_repli,))
        result_s = cursor.fetchone()
        if len(words) == 2:
            if rank >= 3 or user_id == 604366930 or user_id == 538065341:
                rank = int(words[1])
                if rank >= 0 and rank <= 3:
                    if user_id_repli == user_id:
                        await message.answer('–¢–∞–∫ –Ω–µ–ª—å–∑—è!')
                    else:
                        ranks[user_id_repli] = rank
                        await message.answer(f"üëë –†–∞–Ω–≥ @id{user_id_repli}({result_s[1]}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {ranks[rank]}.")
                        cursor.execute(f'UPDATE group_{peer_id} SET rank = %s WHERE id = %s', (rank, user_id_repli))

            else:
                await message.answer('–≠—Ç–æ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å!')

    elif text.startswith('–º–µ–æ ') and not message.reply_message:
        cursor.execute("SELECT * FROM groups WHERE id = %s", (peer_id,))
        result_info = cursor.fetchone()
        if result_info[2] == 1:
            prompt = text[4:]
            result = await generate(prompt)
            await message.reply(result)
        else:
            await message.answer('–£ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ò–ò –º–æ–¥—É–ª—å!', keyboard=keyboard.keyboard_ii)

    elif text.startswith('–º—è–æ '):
        cursor.execute("SELECT * FROM groups WHERE id = %s", (peer_id,))
        result_info = cursor.fetchone()
        if result_info[2] == 1:
            prompt = text[4:]
            result = await generate_yagpt(prompt)
            await message.reply(result)
        else:
            await message.answer('–£ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ò–ò –º–æ–¥—É–ª—å!', keyboard=keyboard.keyboard_ii)

    elif len(words) > 0 and words[0] == '–¥—É—ç–ª—å':
        if len(words) > 1:
            if words[1] == '—Å—Ç–∞—Ç–∞':
                opponent_id = message.reply_message.from_id if message.reply_message else user_id
                await message.answer(await statistic_dyal(opponent_id))

            elif words[1] == '–∏—Å—Ç–æ—Ä–∏—è':
                await message.answer(await history_dyals(user_id))

            elif words[1] == '–≤—ã–∑–æ–≤' and not message.reply_message:
                attachment = random.choice(emy.random_dyal_start)
                user_id_match = re.search(r'\[id(\d+)\|@[^\]]+\]', words[2])
                if user_id_match:
                    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
                    result = cursor.fetchone()
                    money = result[4]
                    user_name = result[1]
                    opponent_id = user_id_match.group(1)
                    cursor.execute('SELECT name, money FROM users WHERE id = %s', (opponent_id,))
                    opponent_result = cursor.fetchone()
                    opponent_name = opponent_result[0]
                    opponent_money = opponent_result[1]
                    if words[3] == '–≤—Å–µ':
                        if opponent_id == user_id:
                            await message.answer(f'‚ùóÔ∏è| –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!')
                        else:
                            # Check if the user has enough money for the bet
                            if opponent_money < money:
                                await message.answer(f'‚ùóÔ∏è| –£ @id{opponent_id}({opponent_name}) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏')
                            else:
                                await message.answer(f"–ò–≥—Ä–æ–∫ @id{user_id}({user_name}) –±—Ä–æ—Å–∞–µ—Ç –≤—ã–∑–æ–≤ @id{opponent_id}({opponent_name})!\n\n–°—Ç–∞–≤–∫–∞ –¥—É—ç–ª–∏: {money}", keyboard=keyboard.keyboard_dyal, attachment=random.choice(emy.random_dyal_start))
                    else:
                        stavka = await emy.parse_number(words[3])
                        stavka = int(stavka)
                        if opponent_id == user_id:
                            await message.answer(f'‚ùóÔ∏è| –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!')
                        else:
                            # Check if the user has enough money for the bet
                            if money < stavka:
                                await message.answer('‚ùóÔ∏è| –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏')
                            elif opponent_money < stavka:
                                await message.answer(f'‚ùóÔ∏è| –£ {opponent_name} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏')
                            elif stavka <= 0:
                                await message.answer(f'‚ùóÔ∏è| @id{user_id} ({user_name}) —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω—É—Å–æ–≤–æ–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π!')
                            else:
                                await message.answer(f"–ò–≥—Ä–æ–∫ @id{user_id}({user_name}) –±—Ä–æ—Å–∞–µ—Ç –≤—ã–∑–æ–≤ @id{opponent_id}({opponent_name})!\n\n–°—Ç–∞–≤–∫–∞ –¥—É—ç–ª–∏: {stavka}", keyboard=keyboard.keyboard_dyal, attachment=random.choice(emy.random_dyal_start))

            elif words[1] == '–≤—ã–∑–æ–≤' and message.reply_message:
                cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
                result = cursor.fetchone()
                money = result[4]
                user_name = result[1]
                opponent_id = message.reply_message.from_id
                cursor.execute('SELECT name, money FROM users WHERE id = %s', (opponent_id,))
                opponent_result = cursor.fetchone()
                opponent_name = opponent_result[0]
                opponent_money = opponent_result[1]

                if len(words) > 2:
                    if words[2] == '–≤—Å–µ':
                        if opponent_id == user_id:
                            await message.answer(f'‚ùóÔ∏è| –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!')
                        else:
                            # Check if the user has enough money for the bet
                            if opponent_money < money:
                                await message.answer(f'‚ùóÔ∏è| –£ @id{opponent_id}({opponent_name}) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏ —Ç.–∫ –æ–Ω –±–æ–º–∂ üçæüèöüí∏ –∏–¥–∏ –Ω–∞ —Ç—Ä–∞—Å—Å–µ —Ä–∞–±–æ—Ç–∞–π —à–ª—é—Ö–∞ üòãüçº')
                            else:
                                await message.answer(f"–ò–≥—Ä–æ–∫ @id{user_id}({user_name}) –±—Ä–æ—Å–∞–µ—Ç –≤—ã–∑–æ–≤ @id{opponent_id}({opponent_name})!\n\n–°—Ç–∞–≤–∫–∞ –¥—É—ç–ª–∏: {money}", keyboard=keyboard.keyboard_dyal, attachment=random.choice(emy.random_dyal_start))
                    else:
                        stavka = await emy.parse_number(words[2])
                        stavka = int(stavka)
                        if opponent_id == user_id:
                            await message.answer(f'‚ùóÔ∏è| –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!')
                        else:
                            # Check if the user has enough money for the bet
                            stavka = int(stavka)
                            if money < stavka:
                                await message.answer('‚ùóÔ∏è| –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏')
                            elif opponent_money < stavka:
                                await message.answer(f'‚ùóÔ∏è| –£ {opponent_name} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏ —Ç.–∫ –æ–Ω –±–æ–º–∂ üçæüèöüí∏ –∏–¥–∏ –Ω–∞ —Ç—Ä–∞—Å—Å–µ —Ä–∞–±–æ—Ç–∞–π —à–ª—é—Ö–∞ üòãüçº')
                            elif stavka <= 0:
                                await message.answer(f'‚ùóÔ∏è| @id{user_id} ({user_name}) —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω—É—Å–æ–≤–æ–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π!')
                            else:
                                await message.answer(f"–ò–≥—Ä–æ–∫ @id{user_id}({user_name}) –±—Ä–æ—Å–∞–µ—Ç –≤—ã–∑–æ–≤ @id{opponent_id}({opponent_name})!\n\n–°—Ç–∞–≤–∫–∞ –¥—É—ç–ª–∏: {stavka}", keyboard=keyboard.keyboard_dyal, attachment=random.choice(emy.random_dyal_start))

    elif len(words) > 0 and words[0] == '–±—Ä–∞–∫':
        if len(words) > 1 and words[1] == '—Å–æ–∑–¥–∞—Ç—å':
            if not message.reply_message:
                user_id_repli = re.search(r'\[id(\d+)\|@[^\]]+\]', words[2])
                if user_id_repli:
                    id_repli = user_id_repli.group(1)
            elif message.reply_message:
                replied_message = message.reply_message
                id_repli = replied_message.from_id

            if id_repli == user_id:
                await message.answer('üö´ü§µ‚Äç‚ôÇÔ∏èüë∞ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–∞–º–∏ —Å–µ–±–µ!')
            else:
                cursor.execute('SELECT * FROM users WHERE id = %s', (id_repli,))
                partner = cursor.fetchone()
                cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
                user = cursor.fetchone()

                cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (user_id,))
                result_global = cursor.fetchone()
                cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (id_repli,))
                result_partner_global = cursor.fetchone()

                if partner is None:
                    await message.answer(f'üö´ü§µ‚Äç‚ôÇÔ∏èüë∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{id_repli} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
                elif result_partner_global[2] is not None:
                    await message.answer(f'üö´ü§µ‚Äç‚ôÇÔ∏èüë∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{id_repli} ({partner[1]}) —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!')
                elif result_global[2] is not None:
                    await message.answer('üö´ü§µ‚Äç‚ôÇÔ∏èüë∞ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–∞–∫!')
                else:
                    user_name = user[1]
                    partner_name = partner[1]
                    await message.answer(f'üíå –£–≤–∞–∂–∞–µ–º—ã–π @id{id_repli} ({partner_name}), –≤–∞—Å –ø—Ä–æ—Å—è—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.\n\n@id{user_id} ({user_name}) —Å–¥–µ–ª–∞–ª(–∞) –≤–∞–º  –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ.\n\n–ü—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.', keyboard=keyboard.keyboard_brak, attachment=random.choice(emy.random_marriage_start))
        else:
            if not message.reply_message:
                await message.answer(await brak_chek(user_id, peer_id))
            else:
                replied_message = message.reply_message
                user_id_repli = replied_message.from_id
                await message.answer(await brak_chek(user_id_repli, peer_id))


    elif text == '–ø–æ–¥–∞—Ç—å —Ä–∞–∑–≤–æ–¥':
        cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result_u = cursor.fetchone()
        if result[2] is None:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–∞–∫–∞ üò¢')
        else:
            cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (result[2],))
            partner = cursor.fetchone()
            cursor.execute('SELECT * FROM users WHERE id = %s', (result[2],))
            partner_u = cursor.fetchone()
            cursor.execute(f'UPDATE group_{peer_id} SET partner_id = NULL WHERE id = %s', (user_id,))
            cursor.execute(f'UPDATE group_{peer_id} SET partner_id = NULL WHERE id = %s', (partner[0],))
            await message.answer(f'[id{partner_u[0]}|{partner_u[1]}], –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ —Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞–Ω–∏—è! @id{user_id}({result_u[1]}) –ø–æ–¥–∞–ª –Ω–∞ —Ä–∞–∑–≤–æ–¥, –≤–∞—à –±—Ä–∞–∫ –æ–±–Ω—É–ª–∏—Ä–æ–≤–∞–Ω!ü•Äüíî', attachment=random.choice(emy.random_marriage_divorce))
            conn.commit()

    elif text.startswith('–∏–º—è ') and not message.reply_message:
        names = text_aup[4:]
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        user_name = result[1]
        cursor.execute('UPDATE users SET name = %s WHERE id = %s', (names, user_id))
        conn.commit()
        await message.answer(f'@id{user_id}({user_name}), —Ç–µ–ø–µ—Ä—å —Ç—ã @id{user_id}({names})!')

    elif len(words) > 0 and words[0] in ['/kick', 'kick', '/–∫–∏–∫', '–∫–∏–∫', '–±–∞–Ω']:
        cursor.execute(f'SELECT * FROM group_{peer_id} WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        rank = result[3]
        if rank >= 2 or user_id == 604366930 or user_id == 538065341:
            if message.reply_message:
                user_id_reply = message.reply_message.from_id
                reason = ' '.join(words[1:])  # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É - –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞
                await kick_user(peer_id, user_id_reply)
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{user_id_repli} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}')
            else:
                if len(words) >= 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã (id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                    user_id_match = re.search(r'\[id(\d+)\|@[^\]]+\]', words[1])
                    if user_id_match:
                        opponent_id = user_id_match.group(1)
                        reason = ' '.join(words[2:])  # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫—É - –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞
                        await kick_user(peer_id, opponent_id)
                        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{opponent_id} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}')
                    else:
                        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
                else:
                    await message.answer('–ù–µ —É–∫–∞–∑–∞–Ω id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
        else:
            await message.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º!')


    elif text == '—ç—Ç—Ç–∏':
        await message.answer(attachment=random.choice(emy.random_png_etty), keyboard=keyboard.keyboard_atty)

    elif text == '–Ω–æ–∂–∫–∏':
        await message.answer(attachment=random.choice(emy.random_png_legs), keyboard=keyboard.keyboard_legs)

    elif text == '–∂–æ–ø—ã':
        await message.answer(attachment=random.choice(emy.random_png_ass), keyboard=keyboard.keyboard_ass)

    elif text == '—Ç—è–Ω–∫–∏':
        await message.answer(attachment=random.choice(emy.random_png_tank), keyboard=keyboard.keyboard_tank)

    elif text == '–Ω–µ–∫–∫–æ':
        await message.answer(attachment=random.choice(emy.random_png_pet), keyboard=keyboard.keyboard_pet)

    elif text == '–≥—Ä—É–¥—å':
        await message.answer(attachment=random.choice(emy.random_png_gry), keyboard=keyboard.keyboard_gry)

    elif text == '—Ç–µ–Ω—Ç–∞–∫–ª–∏':
        await message.answer(attachment=random.choice(emy.random_png_tentacles), keyboard=keyboard.keyboard_tentacles)

    elif text == '–∫–æ—Ç—è—Ç–∞' and message.reply_message:
        replied_message = message.reply_message
        user_id_repli = replied_message.from_id
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id_repli,))
        result = cursor.fetchone()
        money = result[4]
        user_name = result[1]
        await message.answer(f'@id{user_id_repli}({user_name}), —É —Ç–µ–±—è {money:,.0f} –∫–æ—Ç—è—Ç!')

    elif len(words) > 0 and words[0] == '–ø—Ä–∏—é—Ç':
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        bank = result[6]
        money = result[4]
        user_name = result[1]
        if len(words) > 1 and words[1] == '—Å–æ–±—Ä–∞—Ç—å':
            amount = int(words[2])
            if amount < 0:
                await message.answer('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!')
                return
            elif amount > bank:
                await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç—è—Ç!')
                return
            new_balance_bank = bank - amount
            new_balance = money + amount
            cursor.execute('UPDATE users SET bank = %s WHERE id = %s', (new_balance_bank, user_id))
            cursor.execute('UPDATE users SET money = %s WHERE id = %s', (new_balance, user_id))
            conn.commit()
            await message.answer(f'@id{user_id}({user_name}) —Å–æ–±—Ä–∞–ª —Å –ø—Ä–∏—é—Ç–∞ {amount:,.0f} –∫–æ—Ç—è—Ç!')
        elif len(words) > 1 and words[1] == '–æ—Ç–¥–∞—Ç—å':
            amount = int(words[2])
            if amount < 0:
                await message.answer('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!')
                return
            elif amount > money:
                await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç—è—Ç!')
                return
            new_balance_bank = bank + amount
            new_balance = money - amount
            cursor.execute('UPDATE users SET bank = %s WHERE id = %s', (new_balance_bank, user_id))
            cursor.execute('UPDATE users SET money = %s WHERE id = %s', (new_balance, user_id))
            conn.commit()
            await message.answer(f'@id{user_id}({user_name}) –æ—Ç–¥–∞–ª –≤ –ø—Ä–∏—é—Ç {amount:,.0f} –∫–æ—Ç—è—Ç!')


    elif text == '—Ç–æ–ø –∞–∫—Ç–∏–≤':
        msg = await top_msg(user_id, peer_id)
        await message.answer(msg)

    elif text == '–±—Ä–∞–∫–∏':
        msg = await braki(user_id, peer_id)
        await message.answer(msg)

    elif text == '—Ç–æ–ø –∫–æ—Ç—è—Ç':
        msg = await top_cats(peer_id)
        await message.answer(msg)

    elif text == '/henton':
        if user_id == 604366930 or user_id == 538065341:
            hent = 1
            cursor.execute('UPDATE groups SET hent = %s WHERE id = %s', (hent, peer_id))
            conn.commit()
            await message.answer('–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –•–µ–Ω—Ç–∞–π –º–æ–¥—É–ª—å –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ!')

    elif text == '/hentoff':
        if user_id == 604366930 or user_id == 538065341:
            hent = 0
            cursor.execute('UPDATE groups SET hent = %s WHERE id = %s', (hent, peer_id))
            conn.commit()
            await message.answer('–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –•–µ–Ω—Ç–∞–π –º–æ–¥—É–ª—å –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ!')

    elif text == '/iion':
        if user_id == 604366930 or user_id == 538065341:
            ii = 1
            cursor.execute('UPDATE groups SET ii = %s WHERE id = %s', (ii, peer_id))
            conn.commit()
            await message.answer('–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –ò–ò –º–æ–¥—É–ª—å –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ!')

    elif text == '/iioff':
        if user_id == 604366930 or user_id == 538065341:
            ii = 0
            cursor.execute('UPDATE groups SET ii = %s WHERE id = %s', (ii, peer_id))
            conn.commit()
            await message.answer('–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –ò–ò –º–æ–¥—É–ª—å –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ!')

    elif len(words) > 0 and words[0] == '/give':
        if user_id == 604366930 or user_id == 538065341:
            if len(words) > 1:
                m = int(words[1])
                cursor.execute("SELECT money FROM users WHERE id = %s", (user_id,))
                result_info = cursor.fetchone()
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (result_info[0] + m, user_id))
                conn.commit()
                await message.answer(f'Give {m}')

    elif text == '/powerup' and message.reply_message:
        if user_id == 604366930 or user_id == 538065341:
            user_id_repli = message.reply_message.from_id
            cursor.execute('SELECT luck FROM users WHERE id = %s', (user_id_repli,))
            power = cursor.fetchone()[0]
            if power < 5:
                cursor.execute('UPDATE users SET luck = %s WHERE id = %s', (power + 1, user_id_repli))
                conn.commit()
                await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è!')
            else:
                await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ–Ω —É—Ä–æ–≤–Ω—è!')

    elif text.startswith('–∏–º—è ') and message.reply_message:
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        rank = result[5]
        if rank == 2 or user_id == 604366930:
            replied_message = message.reply_message
            user_id_repli = replied_message.from_id
            cursor.execute('SELECT * FROM users WHERE id = %s', (user_id_repli,))
            recesiver = cursor.fetchone()
            user_name_repli = recesiver[1]
            if recesiver[5] == 2:
                await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –∏–º—è –∞–¥–º–∏–Ω–∞!')
            else:
                names = text_aup[4:]
                cursor.execute('UPDATE users SET name = %s WHERE id = %s', (names, user_id_repli))
                await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ @id{user_id_repli}({user_name_repli}) –Ω–∞ @id{user_id_repli}({names})')
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ù—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø: –ê–¥–º–∏–Ω!")

    elif text.startswith('–º—è—É '):
        text_file = 'data.txt'
        num_words = random.randint(1,10)
        generated_text = await emy.generate_words(text_file, num_words)
        await message.reply(generated_text)

    elif len(words) > 0 and words[0] == '–¥–∞—Ç—å' and message.reply_message:
        cursor.execute('SELECT money, name FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        money = result[0]
        user_name = result[1]
        receiver_id = message.reply_message.from_id
        if words[1].isdigit() == False and words[1] == '–≤—Å–µ':
            if receiver_id == user_id:
                await message.answer('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ—Ç—è—Ç —Å–∞–º–æ–º—É —Å–µ–±–µ!')
            else:
                cursor.execute('SELECT money, name FROM users WHERE id = %s', (receiver_id,))
                receiver = cursor.fetchone()
                comis = money / 100
                sender_new_balance = money - money
                receiver_new_balance = receiver[0] + money - comis
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (sender_new_balance, user_id))
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (receiver_new_balance, receiver_id))
                await message.answer(f'‚îå –û—Ç–ø—Ä–∞–≤–∏–ª: @id{user_id}({user_name})\n‚îú –ü–æ–ª—É—á–∏–ª: @id{receiver_id}({receiver[1]})\n‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {money - comis:,.0f}\n‚îú –ö–æ–º–∏—Å—Å–∏—è: {comis:,.0f}\n‚îî –í—Å–µ–≥–æ —Å–Ω—è—Ç–æ: {money:,.0f}')
                conn.commit()
        else:
            amount = int(await emy.parse_number(words[1]))
            if amount < 0:
                await message.answer('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!')
            elif amount > money:
                await message.answer(f'‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç—è—Ç –Ω–∞ —Å—á–µ—Ç—É! –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {amount - money:,.0f} –∫–æ—Ç—è—Ç!')
            elif receiver_id == user_id:
                await message.answer('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ—Ç—è—Ç —Å–∞–º–æ–º—É —Å–µ–±–µ!')
            else:
                cursor.execute('SELECT money, name FROM users WHERE id = %s', (receiver_id,))
                receiver = cursor.fetchone()
                if receiver is None:
                    await message.answer('‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
                else:
                    comis = amount / 100
                    sender_new_balance = money - amount - comis
                    receiver_new_balance = receiver[0] + amount
                    cursor.execute('UPDATE users SET money = %s WHERE id = %s', (sender_new_balance, user_id))
                    cursor.execute('UPDATE users SET money = %s WHERE id = %s', (receiver_new_balance, receiver_id))
                    await message.answer(f'‚îå –û—Ç–ø—Ä–∞–≤–∏–ª: @id{user_id}({user_name})\n‚îú –ü–æ–ª—É—á–∏–ª: @id{receiver_id}({receiver[1]})\n‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount:,.0f}\n‚îú –ö–æ–º–∏—Å—Å–∏—è: {comis:,.0f} –∫–æ—Ç—è—Ç.\n‚îî –í—Å–µ–≥–æ —Å–Ω—è—Ç–æ: {amount + comis:,.0f}')
                    conn.commit()

    elif text.startswith('–∏–Ω—Ñ–∞ —á—Ç–æ '):
        cursor.execute('SELECT name FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        user_name = result[0]
        sentence = text.split('–∏–Ω—Ñ–∞ —á—Ç–æ ')[1]
        chance = random.randint(0, 100)
        chance_text = ""
        if chance <= 33:
            chance_text = "(–º–∞–ª–µ–Ω—å–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å) "
        elif chance <= 66:
            chance_text = "(—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å) "
        else:
            chance_text = "(–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å) "
        reply_text = f"@id{user_id}({user_name})\nüé≤ —è —É–≤–µ—Ä–µ–Ω–∞ —á—Ç–æ {sentence} –Ω–∞ {chance}% —á—Ç–æ —ç—Ç–æ —Ç–∞–∫! - {chance_text}"
        await message.answer(reply_text)


    elif text.startswith('–º—è–≤ '):
        cursor.execute('SELECT name FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        user_name = result[0]
        phrases = text.split(" –∏–ª–∏ ")
        if len(phrases) == 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ—Ä–∞–∑—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ " –∏–ª–∏ "
            choice = random.choice(phrases)
            # –£–±–∏—Ä–∞–µ–º "–º—è–≤" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è —Ñ—Ä–∞–∑–∞
            if choice == phrases[0]:
                choice = choice.replace("–º—è–≤ ", "", 1)
            reply_text = f'@id{user_id}({user_name}), —è –≤—ã–±–∏—Ä–∞—é "{choice}"'
            await message.answer(reply_text)

    elif text == '/id':
        if message.reply_message:
            user_id = message.reply_message.from_id
        else:
            user_id = message.from_id
        reply_text = f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
        await message.answer(reply_text)

    elif len(words) > 0 and words[0] == '–≤—Ä–µ–º—è':
        sity_name = words[1]
        await message.reply(await timeSity(sity_name))

    elif text == '/dr':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_message:
            # –ï—Å–ª–∏ –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
            user_id = message.reply_message.from_id
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id = message.from_id

        result = await message.ctx_api.users.get(user_ids=user_id, fields=["bdate"])
        if result and result[0].bdate:
            bdate = result[0].bdate
            bdate_components = bdate.split('.')
            if len(bdate_components) == 3:
                await message.answer(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {bdate}")
            else:
                hidden_year_message = f"{bdate}.(—Å–∫—Ä—ã—Ç)"
                await message.answer(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {hidden_year_message}")
        else:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")

        return  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∑–¥–µ—Å—å
    # –ö–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω


    elif len(words) > 0 and words[0] == '–¥–∞—Ç—å' and not message.reply_message:
        cursor.execute('SELECT money, name FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        money = result[0]
        user_name = result[1]
        user_id_match = re.search(r'\[id(\d+)\|@[^\]]+\]', words[1])
        receiver_id = user_id_match.group(1)
        if words[2].isdigit() == False and words[2] == '–≤—Å–µ':
            if receiver_id == user_id:
                await message.answer('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ—Ç—è—Ç —Å–∞–º–æ–º—É —Å–µ–±–µ!')
            else:
                cursor.execute('SELECT money, name FROM users WHERE id = %s', (receiver_id,))
                receiver = cursor.fetchone()
                comis = money / 100
                sender_new_balance = money - money
                receiver_new_balance = receiver[0] + money - comis
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (sender_new_balance, user_id))
                cursor.execute('UPDATE users SET money = %s WHERE id = %s', (receiver_new_balance, receiver_id))
                await message.answer(f'‚îå –û—Ç–ø—Ä–∞–≤–∏–ª: @id{user_id}({user_name})\n‚îú –ü–æ–ª—É—á–∏–ª: @id{receiver_id}({receiver[1]})\n‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {money - comis:,.0f}\n‚îú –ö–æ–º–∏—Å—Å–∏—è: {comis:,.0f}\n‚îî –í—Å–µ–≥–æ —Å–Ω—è—Ç–æ: {money:,.0f}')
        else:
            amount = int(await emy.parse_number(words[2]))
            if amount < 0:
                await message.answer('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!')
            elif amount > money:
                await message.answer(f'‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç—è—Ç –Ω–∞ —Å—á–µ—Ç—É! –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {amount - money:,.0f} –∫–æ—Ç—è—Ç!')
            elif receiver_id == user_id:
                await message.answer('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ—Ç—è—Ç —Å–∞–º–æ–º—É —Å–µ–±–µ!')
            else:
                cursor.execute('SELECT money, name FROM users WHERE id = %s', (receiver_id,))
                receiver = cursor.fetchone()
                if receiver is None:
                    await message.answer('‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
                else:
                    comis = amount / 100
                    sender_new_balance = money - amount - comis
                    receiver_new_balance = receiver[0] + amount
                    cursor.execute('UPDATE users SET money = %s WHERE id = %s', (sender_new_balance, user_id))
                    cursor.execute('UPDATE users SET money = %s WHERE id = %s', (receiver_new_balance, receiver_id))
                    await message.answer(f'‚îå –û—Ç–ø—Ä–∞–≤–∏–ª: @id{user_id}({user_name})\n‚îú –ü–æ–ª—É—á–∏–ª: @id{receiver_id}({receiver[1]})\n‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount:,.0f}\n‚îú –ö–æ–º–∏—Å—Å–∏—è: {comis:,.0f} –∫–æ—Ç—è—Ç.\n‚îî –í—Å–µ–≥–æ —Å–Ω—è—Ç–æ: {amount + comis:,.0f}')
        conn.commit()
    else:
        if message.reply_message:
            user_id_repli = message.reply_message.from_id
            if user_id_repli == -215327961:
                cursor.execute("SELECT * FROM groups WHERE id = %s", (peer_id,))
                result_info = cursor.fetchone()
                if result_info[2] == 1:
                    prompt = text
                    result = await generate_repl(prompt, message.reply_message.text)
                    await message.reply(result)
            else:
                if text.startswith('–º–µ–æ '):
                    prompt = text[4:]
                    await message.reply(await generate_a(prompt, message.reply_message.text))
        await update_bd(user_id, peer_id, message)



#
# –ù–ò–ñ–ï –ö–û–î –û–¢–ù–û–°–Ø–©–ò–ô–°–Ø –ö –ü–û–î–ü–ò–°–ö–ï –ò –õ–ê–ô–ö–ê–ú
#
'''
@bot.on.raw_event(GroupEventType.LIKE_REMOVE, dataclass=GroupTypes.LikeRemove)
async def like_remove_handler(event: GroupTypes.LikeRemove):
    if f"{event.object.object_type}"=="CallbackLikeAddRemoveObjectType.POST":
        user_id = event.object.liker_id
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        money = result[4]
        sender_new_balance = money - 35
        cursor.execute('UPDATE users SET money = %s WHERE id = %s', (sender_new_balance, user_id))
        conn.commit()

        await bot.api.messages.send(
            peer_id=user_id, message="–í–∞—à–∏ –∫–æ—Ç—è—Ç–∞ —É—à–ª–∏ –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–∏–º –ª–∞–π–∫–æ–º....\n–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 35 –∫–æ—Ç—è—Ç!", random_id=0
        )


@bot.on.raw_event(GroupEventType.LIKE_ADD, dataclass=GroupTypes.LikeAdd)
async def like_add_handler(event: GroupTypes.LikeAdd):
    if f"{event.object.object_type}"=="CallbackLikeAddRemoveObjectType.POST":
        user_id = event.object.liker_id
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        money = result[4]
        sender_new_balance = money + 20
        cursor.execute('UPDATE users SET money = %s WHERE id = %s', (sender_new_balance, user_id))
        conn.commit()

        await bot.api.messages.send(
            peer_id=user_id, message="–í–∞—à –ª–∞–π–∫ –¥–∞—Ä–∏—Ç –Ω–∞–º —Ä–∞–¥–æ—Å—Ç—å!!\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 20 –∫–æ—Ç—è—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫!", random_id=0
        )
'''

@bot.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
async def group_join_handler(event: GroupTypes.GroupJoin):
    try:
        user_id = event.object.user_id
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        money = result[4]
        sender_new_balance = money + 1000
        cursor.execute('UPDATE users SET money = %s WHERE id = %s', (sender_new_balance, user_id))
        conn.commit()

        await bot.api.messages.send(
            peer_id=user_id, message="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –º–∏–ª–æ–π –≤–æ–ª–æ—Å–∞—Ç–æ–π —Å–µ–º–µ–π–∫–µ!\n–¢—ã –ø–æ–ª—É—á–∞–µ—à—å 1000 –∫–æ—Ç—è—Ç –≤ –∑–Ω–∞–∫ –¥—Ä—É–∂–±—ã!", random_id=0
        )

    # Read more about exception handling in documentation
    # low-level/exception_handling/exception_handling
    except VKAPIError[901]:
        logger.error("Can't send message to user with id {}", event.object.user_id)

@bot.on.raw_event(GroupEventType.GROUP_LEAVE, dataclass=GroupTypes.GroupLeave)
async def group_leave_handler(event: GroupTypes.GroupLeave):
    try:
        user_id = event.object.user_id
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()
        money = result[4]
        sender_new_balance = money - 1100
        cursor.execute('UPDATE users SET money = %s WHERE id = %s', (sender_new_balance, user_id))
        conn.commit()

        await bot.api.messages.send(
            peer_id=user_id, message="–ú—ã –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å!\n–í–∞—à–∏ 1100(+100 –∫–æ—Ç—è—Ç —à—Ç—Ä–∞—Ñ) –∫–æ—Ç—è—Ç –≤–æ–∑—Ä–æ—â–∞—é—Ç—Å—è –≤ –ø—Ä–∏—é—Ç!", random_id=0
        )

    # Read more about exception handling in documentation
    # low-level/exception_handling/exception_handling
    except VKAPIError[901]:
        logger.error("Can't send message to user with id {}", event.object.user_id)

bot.run_forever()